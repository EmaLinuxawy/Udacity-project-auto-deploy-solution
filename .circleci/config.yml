version: 2.1

orbs:
  slack: circleci/slack@4.4.2

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID}"

commands:
  destroy-environment:
    description: Destroy backend and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=`curl -H "token: 0bd51f2c-bf46-41af-9e88-5f11084ce239" --request GET https://api.memstash.io/values/udacity-project-migrations`
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            npm i --save-dev oauth-sign html-loader@2.1.2 html-webpack-plugin@5.3.1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: frontend-test
          command: |
              cd frontend
              npm i --save-dev oauth-sign
              npm run test
      - slack/notify:
          event: fail
          mentions: '@DevOps'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-test
          command: |
              cd backend
              npm run test
      - slack/notify:
          event: fail
          mentions: '@DevOps'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend-scan
          command: |
              cd frontend
              npm audit fix --force
              npm audit --audit-level=critical --force
      - slack/notify:
          event: fail
          mentions: '@DevOps'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-scan
          command: |
              cd backend
              npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          mentions: '@DevOps'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: |
            yum -y install tar gzip jq
      - run:
          name: Ensure backend infrastructure exists
          command: |
            echo $AWS_DEFAULT_REGION
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt && \
            Backend_API_IP=`aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text` && \
            echo $Backend_API_IP >> .circleci/ansible/inventory.txt

            curl -H "Content-Type: text/plain" -H "token: 0bd51f2c-bf46-41af-9e88-5f11084ce239" \
                --request PUT \
                --data $Backend_API_IP https://api.memstash.io/values/udacity-project-backend-api && \
            cat .circleci/ansible/inventory.txt
      - run:
          name: Add .env vars to backend distro
          command: |
            echo ENVIRONMENT=production >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/backend/.env
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6c:e9:93:e8:0b:73:c1:af:f7:11:e7:1f:a0:b5:c2:af"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl jq && \
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible && \
            cat inventory.txt && \
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm i
            npm run migrations >> migration_output.txt
            cat migration_output.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "success" migrations.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 0bd51f2c-bf46-41af-9e88-5f11084ce239" \
                --request PUT \
                --data '1' \
                https://api.memstash.io/values/udacity-project-migrations
            else
              curl -H "Content-Type: text/plain" -H "token: 0bd51f2c-bf46-41af-9e88-5f11084ce239" \
                --request PUT \
                --data '0' \
                https://api.memstash.io/values/udacity-project-migrations
            fi
            echo Key: migrations-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl jq
            pip install awscli
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend && \
            Backend_API_IP=`curl -H "token: 0bd51f2c-bf46-41af-9e88-5f11084ce239" \
                        --request GET https://api.memstash.io/values/udacity-project-backend-api` && \
            API_URL="http://${Backend_API_IP}:3030" && \
            echo API_URL=$API_URL && \
            echo API_URL=$API_URL > .env && \
            npm i && \
            npm run build && \
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6c:e9:93:e8:0b:73:c1:af:f7:11:e7:1f:a0:b5:c2:af"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client jq
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            tar -C backend -czvf backend_artifact.tar.gz . && \
            cd .circleci/ansible && \
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              curl \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: 0bd51f2c-bf46-41af-9e88-5f11084ce239" \
              --request GET https://api.memstash.io/values/udacity-project-backend-api)
            API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s "http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-2.amazonaws.com" | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Knowing Old Workflow ID
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports \
            --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)

            echo OLD_WORKFLOW_ID: ${OLD_WORKFLOW_ID}

            curl -H "Content-Type: text/plain" -H "token: 0bd51f2c-bf46-41af-9e88-5f11084ce239" \
            --request PUT --data "$OLD_WORKFLOW_ID" https://api.memstash.io/values/udacity-project-workflow-id
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Remove old stacks
            command: |
              export OLD_WORKFLOW_ID=$(curl -H "token: 0bd51f2c-bf46-41af-9e88-5f11084ce239" --request GET https://api.memstash.io/values/udacity-project-workflow-id)
              export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)

              echo OLD_WORKFLOW_ID: ${OLD_WORKFLOW_ID}
              echo OurCurrentWorkFlow: ${STACKS[@]}

              if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
              then
                aws s3 rm s3://udapeople-${OLD_WORKFLOW_ID} --recursive
                aws cloudformation delete-stack --stack-name backend-${OLD_WORKFLOW_ID}
                aws cloudformation delete-stack --stack-name frontend-${OLD_WORKFLOW_ID}
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]